name: Build

on:
  push:
    branches: ["master"]
    paths-ignore: ["pypi/**"]
  pull_request:
    paths-ignore: ["pypi/**"]
  workflow_dispatch:

jobs:
  build_macos:
    if: false
    name: MacOS ${{ matrix.os_version }} cp3${{ matrix.python3_version }} ${{ matrix.arch_cibw_go[0] }}
    strategy:
      fail-fast: false
      matrix:
        os_version: [ 10.15, 11, 12 ]
        python3_version: [ 7, 8, 9, 10, 11 ]
        arch_cibw_go:
          - [ "x86_64", "amd64" ]
          - [ "arm64", "arm64" ]
        exclude:
          - os_version: 10.15
            python3_version: 11
          - os_version: 10.15
            arch_cibw_go: [ "arm64", "arm64"]
          - python3_version: 7
            arch_cibw_go: [ "arm64", "arm64"]
    runs-on: macos-${{ matrix.os_version }}
    steps:
      - uses: actions/checkout@v3

      - name: set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19.x"

      - name: install gopy
        run: go install github.com/go-python/gopy@v0.4.5

      - name: install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: install python 3.${{ matrix.python3_version }}
        run: |
          brew install python@3.${{ matrix.python3_version }}
          ln -s /usr/local/opt/python@3.${{ matrix.python3_version }}/bin/python3.${{ matrix.python3_version }}  /usr/local/bin/python_for_build
          /usr/local/bin/python_for_build --version

      - name: install cibuildwheel and pybindgen
        run: /usr/local/bin/python_for_build -m pip install cibuildwheel==2.11.2 pybindgen

      - name: build wheels
        run: /usr/local/bin/python_for_build -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.arch_cibw_go[0] }}
          PYTHON_BINARY_PATH: /usr/local/bin/python_for_build
          CIBW_BUILD: "cp3${{ matrix.python3_version }}-*"
          CIBW_ENVIRONMENT: >
            PATH=$PATH:/usr/local/go/bin
            GOARCH=${{ matrix.arch_cibw_go[1] }}
            CGO_ENABLED=1

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_linux_x86_64:
    if: false
    name: Linux cp37,cp38,cp39,cp310,cp311 x86_64
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.2
        env:
          CIBW_BUILD: "cp3*_x86_64"
          CIBW_SKIP: "cp36-* *-musllinux_x86_64"
          CIBW_ARCHS: "native"
          CIBW_ENVIRONMENT: >
            PATH=$PATH:/usr/local/go/bin
            CGO_ENABLED=1
          CIBW_BEFORE_ALL_LINUX: |
            curl -o go.tar.gz https://dl.google.com/go/go1.19.3.linux-amd64.tar.gz
            tar -C /usr/local -xzf go.tar.gz
            go install github.com/go-python/gopy@v0.4.5
            go install golang.org/x/tools/cmd/goimports@latest

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_linux_arm64:
    if: false
    name: Linux cp37,cp38,cp39,cp310,cp311 arm64
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.2
        env:
          CIBW_BUILD: "cp3*_aarch64"
          CIBW_SKIP: "cp36-* *-musllinux_aarch64"
          CIBW_ARCHS: "aarch64"
          CIBW_ENVIRONMENT: >
            PATH=$PATH:/usr/local/go/bin
            CGO_ENABLED=1
          CIBW_BEFORE_ALL_LINUX: |
            curl -o go.tar.gz https://dl.google.com/go/go1.19.3.linux-arm64.tar.gz
            tar -C /usr/local -xzf go.tar.gz
            go install github.com/go-python/gopy@v0.4.5
            go install golang.org/x/tools/cmd/goimports@latest

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_linux_32_aarch64:
    #if: false
    name: Linux cp37,cp38,cp39,cp310,cp311 32-bit aarch64
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create output dir
        run: |
          mkdir -p /tmp/output/

      - name: Run build
        uses: pguyot/arm-runner-action@v2
        with:
          base_image: raspios_lite_arm64:latest
          copy_artifact_path: /tmp/output/*
          copy_artifact_dest: /tmp/output/
          image_additional_mb: 16384
          use_systemd_nspawn: yes
          commands: |
            apt update && apt -y upgrade
            curl -sSL https://get.docker.com | sh
            docker --version
            file $(which docker)
            systemctl daemon-reload
            systemctl restart docker
            sleep 30s
            journalctl -xu --no-pager docker.service
            systemctl status docker
            stat /var/run/docker.sock

            docker build --platform linux/armhf -t aarch64_32:latest -f ./Dockerfile.armv7l .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: /tmp/output/*.whl

  build_linux_armv7l:
    if: false
    name: Linux cp37,cp38,cp39,cp310,cp311 armv7l
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build wheels via Docker
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.armv7l
          push: false
          platforms: linux/armhf
          tags: armv7l:latest
          cache-from: type=gha
          cache-to: type=gha,mode=min
          load: true

      - name: Extract output
        run: |
          docker run -v /tmp/output:/host armv7l:latest bash -c "cp /export/* /host/"
          tar -zcvf /tmp/output.tar.gz /tmp/output

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: /tmp/output/*.whl

  build_windows:
    if: false
    name: Windows cp37,cp38,cp39,cp310,cp311 x86_64
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v3

      - name: set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19.x"

      - name: install gopy
        run: |
          cd $env:TEMP
          git clone https://github.com/bjia56/gopy
          cd gopy
          git checkout v0.4.5+bjia56.v1
          go install -v
          gopy

      - name: install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.2
        env:
          CIBW_BUILD: "cp3*"
          CIBW_SKIP: "cp36-*"
          CIBW_ARCHS: "native"
          CIBW_ENVIRONMENT: >
            GOARCH=amd64
            CGO_ENABLED=1

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl
